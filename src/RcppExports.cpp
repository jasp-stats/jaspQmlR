// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cleanUp
void cleanUp();
RcppExport SEXP _jaspSyntax_cleanUp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cleanUp();
    return R_NilValue;
END_RCPP
}
// setParameter
bool setParameter(String name, SEXP value);
RcppExport SEXP _jaspSyntax_setParameter(SEXP nameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(setParameter(name, value));
    return rcpp_result_gen;
END_RCPP
}
// loadDataSet
void loadDataSet(Rcpp::List data);
RcppExport SEXP _jaspSyntax_loadDataSet(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    loadDataSet(data);
    return R_NilValue;
END_RCPP
}
// loadQmlAndParseOptions
String loadQmlAndParseOptions(String moduleName, String analysisName, String qmlFile, String options, String version, bool preloadData);
RcppExport SEXP _jaspSyntax_loadQmlAndParseOptions(SEXP moduleNameSEXP, SEXP analysisNameSEXP, SEXP qmlFileSEXP, SEXP optionsSEXP, SEXP versionSEXP, SEXP preloadDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type moduleName(moduleNameSEXP);
    Rcpp::traits::input_parameter< String >::type analysisName(analysisNameSEXP);
    Rcpp::traits::input_parameter< String >::type qmlFile(qmlFileSEXP);
    Rcpp::traits::input_parameter< String >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< String >::type version(versionSEXP);
    Rcpp::traits::input_parameter< bool >::type preloadData(preloadDataSEXP);
    rcpp_result_gen = Rcpp::wrap(loadQmlAndParseOptions(moduleName, analysisName, qmlFile, options, version, preloadData));
    return rcpp_result_gen;
END_RCPP
}
// generateModuleWrappers
String generateModuleWrappers(String modulePath, bool preloadData);
RcppExport SEXP _jaspSyntax_generateModuleWrappers(SEXP modulePathSEXP, SEXP preloadDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type modulePath(modulePathSEXP);
    Rcpp::traits::input_parameter< bool >::type preloadData(preloadDataSEXP);
    rcpp_result_gen = Rcpp::wrap(generateModuleWrappers(modulePath, preloadData));
    return rcpp_result_gen;
END_RCPP
}
// generateAnalysisWrapper
String generateAnalysisWrapper(String modulePath, String qmlFileName, String analysisName, String title, bool preloadData);
RcppExport SEXP _jaspSyntax_generateAnalysisWrapper(SEXP modulePathSEXP, SEXP qmlFileNameSEXP, SEXP analysisNameSEXP, SEXP titleSEXP, SEXP preloadDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type modulePath(modulePathSEXP);
    Rcpp::traits::input_parameter< String >::type qmlFileName(qmlFileNameSEXP);
    Rcpp::traits::input_parameter< String >::type analysisName(analysisNameSEXP);
    Rcpp::traits::input_parameter< String >::type title(titleSEXP);
    Rcpp::traits::input_parameter< bool >::type preloadData(preloadDataSEXP);
    rcpp_result_gen = Rcpp::wrap(generateAnalysisWrapper(modulePath, qmlFileName, analysisName, title, preloadData));
    return rcpp_result_gen;
END_RCPP
}
// getVariableNames
Rcpp::List getVariableNames();
RcppExport SEXP _jaspSyntax_getVariableNames() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getVariableNames());
    return rcpp_result_gen;
END_RCPP
}
// getVariableValues
Rcpp::List getVariableValues(String variableName);
RcppExport SEXP _jaspSyntax_getVariableValues(SEXP variableNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type variableName(variableNameSEXP);
    rcpp_result_gen = Rcpp::wrap(getVariableValues(variableName));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jaspSyntax_cleanUp", (DL_FUNC) &_jaspSyntax_cleanUp, 0},
    {"_jaspSyntax_setParameter", (DL_FUNC) &_jaspSyntax_setParameter, 2},
    {"_jaspSyntax_loadDataSet", (DL_FUNC) &_jaspSyntax_loadDataSet, 1},
    {"_jaspSyntax_loadQmlAndParseOptions", (DL_FUNC) &_jaspSyntax_loadQmlAndParseOptions, 6},
    {"_jaspSyntax_generateModuleWrappers", (DL_FUNC) &_jaspSyntax_generateModuleWrappers, 2},
    {"_jaspSyntax_generateAnalysisWrapper", (DL_FUNC) &_jaspSyntax_generateAnalysisWrapper, 5},
    {"_jaspSyntax_getVariableNames", (DL_FUNC) &_jaspSyntax_getVariableNames, 0},
    {"_jaspSyntax_getVariableValues", (DL_FUNC) &_jaspSyntax_getVariableValues, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_jaspSyntax(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
